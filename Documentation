SEE https://docs.docker.com/engine/reference/run/#detached-vs-foreground

CONTENERS VS IMAGES
images are like VMs, they exist but are not active. You create a contener with an image to do your things, so you can have several conteners with the same image

FOR LONG TASKS DO:
echo "command" > run.sh
chmod +x run.sh

BECAUSE:
create file that will automatically run the command, but needs to me made executable with chmod

TO BUILD:
docker build -t "name" .

-t helps give a name to the built image and the point is because the Dockerfile is directly in this place (if it's not, write the path to the Dockerfile)

SEE IMAGES
(sudo) docker images

DESTROY IMAGE:
docker rmi -f hello
rmi: remove image name of image
-f force destruction if image is used somewhere else

TO RUN:
docker run -t -i -p 8000:8000 budal/hello /bin/bash OR & OR -d
docker run OPTIONS PORTS NAME COMMAND TO LAUNCH AT RUN
-t alias TTY, maps stdin, stdout, detached
-i same but for input
PORTS: first computer, second docker
NAME: login on dockerhub/ name given to the docker at building, can also be the version with :latest for example
-d detached, is not dependent to running terminal
same for & but is an UNIX feature
/bin/bash, command launched in the docker

SEE CONTENERS:
docker ps -a
-a see former conteners

GO IN DOCKER:
docker exec -it 5449c44b0708 bash
docker exec OPTIONS CONTENER ID COMMAND

SAVE CONTENER:
docker commit -m="saving toto file" -a="budal" f53a54ba343e budal/hello
-m message of commit
-a is user name
f53 id contener id (instance)
built name (user and project)

SAVE CONTENER ONLINE
docker push budal/hello
send contener to dockerhub

SAVE CONTENER IN COMPUTER FILE:
docker save picsou/ubuntu14.04 > /tmp/mynewimage.tar
user/name > file location/name of the archive file (.tar)

LOAD CONTENER FROM COMPUTER FILE:
docker load < /tmp/mynewimage.tar

STOP DOCKER:
docker stop contener id

SEE ENV:
env

CHANGE ENV
export new environment like DEBIAN_FRONTEND=noninteractive

IF ERROR:
ERRO[0000] failed to dial gRPC: cannot connect to the Docker daemon. Is 'docker daemon' running on this host?: dial unix /var/run/docker.sock: connect: permission denied

DO:
sudo systemctl status docker
sudo systemctl start docker

BECAUSE:
Docker has just been installed so the docker demon is not up yet (a demon is an ongoing process that connects you to different websites and help launch gthe build process). So you check if it's running, and if it's not you launch it.

IF ERROR:
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.40/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile&labels=%7B%7D&memory=0&memswap=0&networkmode=default&rm=1&session=mw8blk3nkiul79l9q3lyhmjab&shmsize=0&t=hello&target=&ulimits=null&version=1: dial unix /var/run/docker.sock: connect: permission denied

DO:
sudo 'command'
OR
sudo usermod -a -G docker 'username'

BECAUSE:
it means that the user doesn't have the rights to execute the command. Either sudo promotes you to admin or the other line adds you to the docker group
